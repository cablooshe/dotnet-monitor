// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using Microsoft.Diagnostics.Monitoring.WebApi.Models;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;

namespace Microsoft.Diagnostics.Monitoring.WebApi
{
    internal class EgressOperation : IEgressOperation
    {
        private readonly Func<IEgressService, CancellationToken, Task<EgressResult>> _egress;
        private readonly string _egressProvider;
        private readonly KeyValueLogScope _scope;
        private readonly EgressProcessInfo _egressProcessInfo;

        public EgressOperation(Func<CancellationToken, Task<Stream>> action, string endpointName, string artifactName, IProcessInfo processInfo, string contentType, KeyValueLogScope scope)
        {
            _egress = (service, token) => service.EgressAsync(endpointName, action, artifactName, contentType, processInfo.EndpointInfo, token);
            _egressProvider = endpointName;
            _scope = scope;

            _egressProcessInfo = new EgressProcessInfo(processInfo.ProcessName, processInfo.EndpointInfo.ProcessId, processInfo.EndpointInfo.RuntimeInstanceCookie);
        }

        public EgressOperation(Func<Stream, CancellationToken, Task> action, string endpointName, string artifactName, IEndpointInfo source, string contentType, KeyValueLogScope scope)
        {
            _egress = (service, token) => service.EgressAsync(endpointName, action, artifactName, contentType, source, token);
            _egressProvider = endpointName;
            _scope = scope;
            _egressProcessInfo = new EgressProcessInfo(null, source.ProcessId, source.RuntimeInstanceCookie);
        }

        public EgressOperation(Func<CancellationToken, Task<Stream>> action, string endpointName, string artifactName, IEndpointInfo source, string contentType, KeyValueLogScope scope)
        {
            _egress = (service, token) => service.EgressAsync(endpointName, action, artifactName, contentType, source, token);
            _egressProvider = endpointName;
            _scope = scope;
            _egressProcessInfo = new EgressProcessInfo(null, source.ProcessId, source.RuntimeInstanceCookie);
        }

        public async Task<ExecutionResult<EgressResult>> ExecuteAsync(IServiceProvider serviceProvider, CancellationToken token)
        {
            ILogger<EgressOperation> logger = serviceProvider
                .GetRequiredService<ILoggerFactory>()
                .CreateLogger<EgressOperation>();

            using var _ = logger.BeginScope(_scope);

            return await ExecutionHelper.InvokeAsync(async (token) =>
            {
                IEgressService egressService = serviceProvider
                    .GetRequiredService<IEgressService>();

                EgressResult egressResult = await _egress(egressService, token);

                logger.EgressedArtifact(egressResult.Value);

                // The remaining code is creating a JSON object with a single property and scalar value
                // that indiates where the stream data was egressed. Because the name of the artifact is
                // automatically generated by the REST API and the caller of the endpoint might not know
                // the specific configuration information for the egress provider, this value allows the
                // caller to more easily find the artifact after egress has completed.
                return ExecutionResult<EgressResult>.Succeeded(egressResult);
            }, logger, token);
        }

        public EgressProcessInfo GetEgressProcessInfo()
        {
            return _egressProcessInfo;
        }

        public void Validate(IServiceProvider serviceProvider)
        {
            serviceProvider
                .GetRequiredService<IEgressService>()
                .ValidateProvider(_egressProvider);
        }
    }

    internal readonly struct EgressProcessInfo
    {
        public readonly string ProcessName;
        public readonly int ProcessId;
        public readonly Guid RuntimeInstanceCookie;

        public EgressProcessInfo(string processName, int processId, Guid runtimeInstanceCookie) : this()
        {
            this.ProcessName = processName;
            this.ProcessId = processId;
            this.RuntimeInstanceCookie = runtimeInstanceCookie;
        }
    }
}
